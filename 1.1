1. Start up an interactive Python session and try typing in each of the following commands. Write down the results you see.
a) print(“Hello, world!”)
Hello, world!
b) print(“Hello”, “world!”)
Hello”, “world!
c) print(3)
3
d) print(3.0)
3.0
e) print(2 + 3)
5
f) print(2.0 + 3.0)
5.0
g) print(“2” + “3”)
2” + “3


h) print(“2 + 3 =”, 2 + 3)
2 + 3 = 5
i) print(2 * 3)
6
j) print(2 ** 3)
8
k) print(7 / 3)
2.3333333333333335
1) print(7 // 3)
2

*2. Enter and run the chaos program. Try it out with various values of input to see that it functions as described by the instructor.

3. Modify the chaos program using 2.0 in place of 3.9 as the multiplier in the logistic function. Your modified line of code should look like this:

x = 2.0 * x * (1 - x)

Run the program for various input values and compare the results to those obtained from the original program. Write a short paragraph describing any differences that you notice in the behavior of the two versions.

The chaos that we used before had more long random numbers and now we only have a few long random numbers and some short numbers that are 0.5.
4. Modify the chaos program so that it prints out 20 values instead of 10.
# File: chaos.py
# Created 11/13/18 by John Slattery Jr.
# A simple program illustrating chaotic behavior.
# Defining the function
def main():
    #printing a line
    print("This program illustrates a chaotic function")
    #setting a varaible to the in put 0-1 and making a number
    x = eval(input("Enter a number between 0 and 1: "))
    #setting a loop
    for i in range(20) :
        #dose math
        x = 2.0 * x * (1 - x)
        # prints X
        print(x)
main()





5. Modify the chaos program so that the number of values to print is determined by the user. You will have to add a line near the top of the program to get another value from the user:

n = eval(input(“How many numbers should I print? ”))

Then you will need to change the loop to use n instead of a specific number.


# File: chaos.py
# Created 11/13/18 by John Slattery Jr.
# A simple program illustrating chaotic behavior.

# Defining the function
def main():
    #puting variable n and printing how many lins sholud it print
    n = eval(input("how many numbers should i print? "))
    #printing a line
    print("This program illustrates a chaotic function")
    #setting a varaible to the in put 0-1 and making a number
    x = eval(input("Enter a number between 0 and 1: "))
    #setting a loop
    for i in range(n) :
        #dose math
        x = 2.0 * x * (1 - x)
        # prints X
        print(x)
main()







6. The calculation performed in the chaos program can be written in a number of ways that are algebraically equivalent. Write a version of the program for each of the following ways of doing the computation. Have your modified programs print out 100 iterations of the calculation and compare the results when run on the same input.

a) 3.9 * x * (1 - x)
b) 3.9 * (x - x * x)
c) 3.9 * x - 3.9 * x * x

Explain the results of this experiment.
Between a,b, and c they were all different and had none of the same answers

7. Write a program that uses a for loop to print the sentence “Hello, Python!” ten times.
# Created 11/13/18 by John Slattery Jr.
for i in range(10) :
    print("Hello, Python!")


8. Write a program that prints the integers from 0 to 9.
# Created 11/13/18 by John Slattery Jr.
x = 0
for i in range(10) :
    print(x)
    x = x + 1


9. Write a program that prints the integers from 0 to 10.
# Created 11/13/18 by John Slattery Jr.
x = 0
for i in range(11) :
    print(x)
    x = x + 1


10. Write a program that prints the even integers from 2 to 20.
# Created 11/13/18 by John Slattery Jr.
x = 0
for i in range(11) :
    print(x)
    x = x + 2


11. Write a program that prints the squares of the integers from 1 to 10.

# Created 11/13/18 by John Slattery Jr.
x = 1
for i in range(11) :
    print(x**2)
    x = x + 1


